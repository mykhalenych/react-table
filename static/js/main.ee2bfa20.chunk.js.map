{"version":3,"sources":["helpers/sort.js","gateways/gateway.js","redux/products.selectors.js","redux/products.actions.js","components/error/Error.js","components/editProduct/EditProuct.js","components/productTable/Products.js","components/addNew/NewProduct.js","App.js","redux/products.reducers.js","store.js","index.js"],"names":["useSortableData","items","config","useState","sortConfig","setSortConfig","sortedItems","useMemo","sortableItems","sort","a","b","key","direction","requestSort","baseUrl","productsListSelector","state","products","productsList","getProductsList","dispatch","fetch","then","response","ok","json","type","payload","productsListRecived","ErrorField","children","className","initialValues","name","qty","price","validationSchema","Yup","required","mapDispatch","editProduct","id","product","updatedProduct","productId","method","headers","body","JSON","stringify","Error","updateProduct","connect","closeModal","console","log","onSubmit","useCallback","values","userData","onClick","htmlFor","component","ProductTable","removeProducts","isModalOpen","setModalOpen","currentItem","setCurrent","totalPrice","reduce","total","totalQuantity","map","item","selectItem","addProduct","newProduct","Math","random","toString","actions","removeProduct","res","useEffect","initialState","productsReducer","action","reducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ee2bfa20.chunk.js","sourcesContent":["import {useState, useMemo} from 'react'\n\nconst useSortableData = (items, config = null) => {\n  const [sortConfig, setSortConfig] = useState(config);\n\n  const sortedItems = useMemo(() => {\n    let sortableItems = [...items];\n    if (sortConfig !== null) {\n      sortableItems.sort((a, b) => {\n        if (a[sortConfig.key] < b[sortConfig.key]) {\n          return sortConfig.direction === 'ascending' ? -1 : 1;\n        }\n        if (a[sortConfig.key] > b[sortConfig.key]) {\n          return sortConfig.direction === 'ascending' ? 1 : -1;\n        }\n        return 0;\n      });\n    }\n    return sortableItems;\n  }, [items, sortConfig]);\n\n  const requestSort = (key) => {\n    let direction = 'ascending';\n    if (\n      sortConfig &&\n      sortConfig.key === key &&\n      sortConfig.direction === 'ascending'\n    ) {\n      direction = 'descending';\n    }\n    setSortConfig({ key, direction });\n  };\n\n  return { items: sortedItems, requestSort, sortConfig };\n};\n\nexport default useSortableData","const baseUrl = \"https://5eca820038df9600165117b6.mockapi.io/mock\";\n\nexport const fetchProductsList = () => {\n  return fetch(baseUrl)\n    .then((response) => {\n      if (response.ok) {\n        return response.json();\n      }\n    })\n};\n\nexport const addProduct = (newProduct) => {\n  return fetch(baseUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-type\": \"application/json; charset=utf-8\",\n    },\n    body: JSON.stringify(newProduct),\n  }).then((response) => {\n    if (!response.ok) {\n      throw new Error(\"Failed to create product\");\n    }\n  });\n};\n\nexport const deleteProduct = (productId) => {\n  return fetch(`${baseUrl}/${productId}`, {\n    method: \"DELETE\",\n  }).then((res) => {\n    if (!res.ok) {\n      throw new Error(\"Failed to delete product\");\n    }\n  });\n};\n\nexport const updateProduct = (productId, updatedProduct) => {\n  return fetch(`${baseUrl}/${productId}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-type\": \"application/json; charset=utf-8\",\n    },\n    body: JSON.stringify(updatedProduct),\n  }).then((response) => {\n    if (!response.ok) {\n      throw new Error(\"Failed to update product\");\n    }\n  });\n};","export const productsListSelector = (state) => state.products.productsList;","import {\n  fetchProductsList,\n  addProduct,\n  deleteProduct,\n  updateProduct,\n} from \"../gateways/gateway\";\nimport { productsListSelector } from \"./products.selectors\";\n\nexport const PRODUCTS_LIST_RECIVED = \"PRODUCTS_LIST_RECIVED\";\n\nexport const productsListRecived = (productsList) => {\n  const action = {\n    type: PRODUCTS_LIST_RECIVED,\n    payload: {\n      productsList,\n    },\n  };\n  return action;\n};\nexport const getProductsList = () => {\n  const thunkAction = function (dispatch) {\n    fetchProductsList().then((productsList) =>\n      dispatch(productsListRecived(productsList))\n    );\n  };\n  return thunkAction;\n};\n\nexport const addProducts = (product) => {\n  const thunkAction = function (dispatch) {\n    const newProduct = {\n      ...product,\n    };\n    addProduct(newProduct).then(() => dispatch(getProductsList()));\n  };\n  return thunkAction;\n};\n\nexport const removeProduct = (id) => {\n  const thunkAction = function (dispatch) {\n    deleteProduct(id).then(() => dispatch(getProductsList()));\n  };\n  return thunkAction;\n};\n\nexport const updateProductList = (id, product) => {\n  const thunkAction = function (dispatch) {\n    const updatedProduct = {\n      ...product,\n    };\n\n    updateProduct(id, updatedProduct).then(() => dispatch(getProductsList()));\n  };\n\n  return thunkAction;\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst ErrorField = ({ children }) => {\n  return <div className=\"error\">{children}</div>;\n};\n\nErrorField.propTypes = {\n  children: PropTypes.string,\n};\n\nexport default ErrorField;\n","import React, { useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Formik, Form, ErrorMessage, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport { connect } from \"react-redux\";\nimport { updateProductList } from \"../../redux/products.actions\";\nimport ErrorField from \"../error/Error\";\n\nconst initialValues = {\n  name: \"\",\n  qty: \"\",\n  price: \"\",\n};\n\nconst validationSchema = Yup.object({\n  name: Yup.string().required(\"Required\"),\n  price: Yup.number().required(\"Required\"),\n  qty: Yup.number().required(\"Required\"),\n});\n\nconst EditProduct = ({ closeModal, product, editProduct }) => {\n  console.log(product.id)\n  const onSubmit = useCallback((values) => {\n    const userData = {\n      ...values,\n    };\n    editProduct(product.id, userData)\n    closeModal();\n  }, []);\n\n  return (\n    <div className=\"modal-product\">\n      <button className=\"modal-product__close\" onClick={closeModal}>\n        X\n      </button>\n      <div className=\"block\">\n        <Formik\n          initialValues={initialValues}\n          onSubmit={onSubmit}\n          validationSchema={validationSchema}\n        >\n          <Form className=\"block__form\">\n            <div className=\"block__product-info\">\n              <div className=\"block__description\">\n                <label className=\"label\" htmlFor=\"name\">\n                  Name\n                </label>\n                <Field\n                  name=\"name\"\n                  type=\"text\"\n                  id=\"name\"\n                  className=\"modal-input input\"\n                />\n                <ErrorMessage name=\"name\" component={ErrorField} />\n                <label className=\"label\" htmlFor=\"name\">\n                  Price\n                </label>\n                <Field\n                  name=\"price\"\n                  type=\"number\"\n                  className=\"modal-input input\"\n                />\n                <ErrorMessage name=\"price\" component={ErrorField} />\n                <label className=\"label\" htmlFor=\"name\">\n                  Quantity\n                </label>\n                <Field name=\"qty\" type=\"number\" className=\"modal-input input\" />\n                <ErrorMessage name=\"qty\" component={ErrorField} />\n              </div>\n            </div>\n            <button className=\"btn-submit btn\" type=\"submit\">\n              Submit\n            </button>\n          </Form>\n        </Formik>\n      </div>\n    </div>\n  );\n};\n\nconst mapDispatch = {\n  editProduct: updateProductList,\n};\n\nEditProduct.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n  editProduct: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatch)(EditProduct);\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport useSortableData from \"../../helpers/sort\";\nimport EditProduct from \"../editProduct/EditProuct\";\n\nconst ProductTable = ({ products, removeProducts }) => {\n  const [isModalOpen, setModalOpen] = useState(false);\n  const [currentItem, setCurrent] = useState({})\n  const closeModal = () => {\n    setModalOpen(false);\n  };\n  const selectItem = (item) => {\n    setCurrent(item)\n    setModalOpen(true)\n  }\n\n  const { items, requestSort } = useSortableData(products);\n  const totalPrice = products.reduce(\n    (total, product) => total + product.price,\n    0\n  );\n  const totalQuantity = products.reduce(\n    (total, product) => total + product.qty,\n    0\n  );\n  return (\n    <table>\n      <thead className=\"thead\">\n        <th className=\"thead-th\">\n          <span onClick={() => requestSort(\"name\")}>Name</span>\n        </th>\n        <th className=\"thead-th\">\n          <span onClick={() => requestSort(\"price\")}>Price</span>\n        </th>\n        <th className=\"thead-th\">\n          <span onClick={() => requestSort(\"quantity\")}>Quantity</span>\n        </th>\n        <th className=\"thead-th\"></th>\n      </thead>\n      <tbody>\n        {items.map((item) => (\n          <tr key={item.id}>\n            <td>{item.name}</td>\n            <td>${item.price}</td>\n            <td>{item.qty}</td>\n            <td className=\"center\">\n              <button onClick={() => selectItem(item)}>Edit</button>\n              {isModalOpen && (\n                <EditProduct\n                  closeModal={closeModal}\n                  product={currentItem}\n                />\n              )}\n              <button onClick={() => removeProducts(item.id)}>Delete</button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n      <tfoot>\n        <td>-</td>\n        <td>{`$${totalPrice}`}</td>\n        <td>{totalQuantity}</td>\n        <td></td>\n      </tfoot>\n    </table>\n  );\n};\nProductTable.propTypes = {\n  removeProducts: PropTypes.func.isRequired,\n  products: PropTypes.array,\n};\n\nexport default ProductTable;\n","import React, { useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Formik, Form, ErrorMessage, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport { connect } from \"react-redux\";\nimport { addProducts } from \"../../redux/products.actions\";\nimport ErrorField from \"../error/Error\";\n\nconst initialValues = {\n  name: \"\",\n  qty: \"\",\n  price: \"\",\n};\n\nconst validationSchema = Yup.object({\n  name: Yup.string().required(\"Required\"),\n  price: Yup.number().required(\"Required\"),\n  qty: Yup.number().required(\"Required\"),\n});\n\nconst NewProduct = ({ closeModal, addProduct }) => {\n  const onSubmit = useCallback((values) => {\n    const id = Math.random().toString();\n    const userData = {\n      ...values,\n      id,\n    };\n    addProduct(userData);\n    closeModal();\n  }, []);\n\n  return (\n    <div className=\"modal-product\">\n      <button className=\"modal-product__close\" onClick={closeModal}>\n        X\n      </button>\n      <div className=\"block\">\n        <Formik\n          initialValues={initialValues}\n          onSubmit={onSubmit}\n          validationSchema={validationSchema}\n        >\n          <Form className=\"block__form\">\n            <div className=\"block__product-info\">\n              <div className=\"block__description\">\n                <label className=\"label\" htmlFor=\"name\">\n                  Name\n                </label>\n                <Field\n                  name=\"name\"\n                  type=\"text\"\n                  id=\"name\"\n                  className=\"modal-input input\"\n                />\n                <ErrorMessage name=\"name\" component={ErrorField} />\n                <label className=\"label\" htmlFor=\"name\">\n                  Price\n                </label>\n                <Field\n                  name=\"price\"\n                  type=\"number\"\n                  className=\"modal-input input\"\n                />\n                <ErrorMessage name=\"price\" component={ErrorField} />\n                <label className=\"label\" htmlFor=\"name\">\n                  Quantity\n                </label>\n                <Field name=\"qty\" type=\"number\" className=\"modal-input input\" />\n                <ErrorMessage name=\"qty\" component={ErrorField} />\n              </div>\n            </div>\n            <button className=\"btn-submit btn\" type=\"submit\">\n              Submit\n            </button>\n          </Form>\n        </Formik>\n      </div>\n    </div>\n  );\n};\n\nconst mapDispatch = {\n  addProduct: addProducts,\n};\n\nNewProduct.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n  addProduct: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatch)(NewProduct);\n","import React, { useState, useEffect } from \"react\";\nimport ProductTable from \"./components/productTable/Products\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { productsListSelector } from \"./redux/products.selectors\";\nimport * as actions from \"./redux/products.actions\";\nimport NewProduct from \"./components/addNew/NewProduct\";\n\nconst App = ({ products, removeProduct, getProductsList }) => {\n  const [isModalOpen, setModalOpen] = useState(false);\n\n  const closeModal = () => {\n    setModalOpen(false);\n  };\n\n  useEffect(() => {\n    getProductsList();\n  }, []);\n  return (\n    <div className=\"conteiner\">\n      <button onClick={() => setModalOpen(true)}>Add</button>\n      {isModalOpen && <NewProduct closeModal={closeModal} />}\n      <ProductTable removeProducts={removeProduct} products={products} />\n    </div>\n  );\n};\n\nApp.propTypes = {\n  getProductsList: PropTypes.func.isRequired,\n  tasks: PropTypes.array,\n  removeProduct: PropTypes.func,\n};\nconst mapDispatch = {\n  getProductsList: actions.getProductsList,\n  removeProduct: actions.removeProduct,\n};\nconst mapState = (state) => {\n  return {\n    products: productsListSelector(state),\n  };\n};\nexport default connect(mapState, mapDispatch)(App);\n","import { PRODUCTS_LIST_RECIVED } from \"./products.actions\";\n\nconst initialState = {\n  productsList: [],\n};\n\nconst productsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case PRODUCTS_LIST_RECIVED:\n      return {\n        ...state,\n        productsList: action.payload.productsList,\n      };\n\n    default:\n      return state;\n  }\n};\nexport default productsReducer;\n","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport productsReducer from \"./redux/products.reducers\";\n\nconst reducer = combineReducers({\n  products: productsReducer,\n});\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(thunk)));\n\nexport default store;\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\nimport './index.scss'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}